@use 'sass:color';
@use "sass:map";
@use 'sass:math';

$slice_count: 8;


@function get_layer_bg($foreground, $background, $slice_index, $slices){
  $hue: color.hue($foreground);
  $sat: color.saturation($foreground);
  $lig: color.lightness($foreground);
  $hue-bg: color.hue($background);
  $sat-bg: color.saturation($background);
  $lig-bg: color.lightness($background);
  $hue-diff: $hue-bg - $hue;
  $sat-diff: $sat - $sat-bg;
  $lig-diff: $lig-bg - $lig;
  $hue-shift: math.div($hue-diff, $slices);
  $sat-shift: math.div($sat-diff, $slices);
  $lig-shift: math.div($lig-diff, $slices);
  $ex-index: math.pow(math.div($slice_index, 4), 3);
  $hue-shifted: $hue-shift * ($slices - $ex-index);
  $sat-shifted: $sat-shift * ($slices - $ex-index);
  $lig-shifted: $lig-shift * ($slices - $ex-index);
  $color: color.adjust($foreground, $hue: $hue-shifted, $saturation: $sat-shifted, $lightness: $lig-shifted);
  @return $color;
}

$fg-name-dark: map.get($theme-options, 'dark', 'bg-medium'); // get color name from theme options
$fg-color-dark: map.get($colors, $fg-name-dark); // get color value from colors name

$bg-name-dark: map.get($theme-options, 'dark', 'bg-heavy'); // get color name from theme options
$bg-color-dark: map.get($colors, $bg-name-dark);

$sh-name-dark: map.get($theme-options, 'dark', 'bg-light'); // get color name from theme options
$sh-color-dark: map.get($colors, $sh-name-dark);

$fg-name-light: map.get($theme-options, 'light', 'bg-medium'); // get color name from theme options
$fg-color-light: map.get($colors, $fg-name-light); // get color value from colors name

$bg-name-light: map.get($theme-options, 'light', 'bg-heavy'); // get color name from theme options
$bg-color-light: map.get($colors, $bg-name-light); // get color value from colors name

$sh-name-light: map.get($theme-options, 'light', 'bg-light'); // get color name from theme options
$sh-color-light: map.get($colors, $sh-name-light);


html[data-theme="dark"]{
  
  
  .cover-layer-mask{
    --layer-bg: var(--dark-layer-bg);
    --layer-shade: var(--dark-layer-shade);
  }
}
html[data-theme="light"]{
  
  .cover-layer-mask{
    --layer-bg: var(--light-layer-bg);
    --layer-shade: var(--light-layer-shade);
  }
}

#cover {
  contain: paint;
  overflow: hidden;
  position: fixed;
  overflow: hidden;
  width: 100%;
  height: 100%;
  inset: 0;
  z-index: 0;
  background-color: var(--bg-heavy);
  --slices: 8;
  --modifier: 15;
  --time-modifier: 15s;
  --rotation-const: 0deg;
  --animation-duration: calc(var(--slices) * var(--time-modifier));
  --clip: path('');
  @media (orientation: portrait) {
      
    --rotation-const: 90deg;
  }
  .cover-wrapper{
    position: absolute;
    left: 0;
    height: 0;
    width: 100%;
    height: 100vh;
    
    
  }
  
  
  .cover-layer-wrapper {
    //perspective: 230px;
    position: absolute;
    z-index: -1;
    inset: 0;
    width: 100vmax;
    height: 100vmax;
    //transform-style: preserve-3d;
    margin: auto;
    isolation: isolate;
    //backface-visibility: hidden;
    //will-change: transform;
    //animation: wrapper-rotation var(--animation-duration) linear  infinite;
    @media (orientation: landscape) {
       left: 15%;
    }
    .cover-layer {
      
      position: absolute;
      inset: 0;
      transform-origin: center;
      //transform-style: preserve-3d;
      backface-visibility: hidden;
      opacity: 1;
      contain: paint;
      will-change: transform, opacity;
      

      .cover-layer-mask{
        position: absolute;
        width: 100%;
        height: 100%;
        
        inset: 0;
        z-index: 1;
        shape-rendering: optimizeSpeed;
        clip-path: var(--clip);
        background: conic-gradient(from -125deg, var(--layer-shade), var(--layer-bg), var(--layer-shade), var(--layer-bg), var(--layer-shade), var(--layer-bg), var(--layer-shade));
          //background-size: 50%;
        background-repeat: no-repeat;
        background-position: center;
        
        
      }
      // &:last-of-type{
      //   .cover-layer-mask{
      //     $cover_shade: color.mix($fg-color-dark, $sh-color-dark, 80%);
      //     background-image: conic-gradient(from -125deg, $cover_shade, var(--bg-medium) , $cover_shade, var(--bg-medium) , $cover_shade, var(--bg-medium) , $cover_shade);
      //     background-size: 50%;
      //     background-repeat: no-repeat;
      //     background-position: center;
          
      //   }
      // }
      .cover-layer-shadow{
        
        
        position: absolute;
        width: 98%;
        height: 98%;
        z-index: 0;
        inset: 1%;
        border-radius: 50%;
        //opacity: 0.2;
        mix-blend-mode: multiply;
        background-color: var(--bg-heavy);
        //background-image: radial-gradient(var(--bg-heavy), var(--bg-heavy-00) 10%, var(--bg-heavy) 40%);
        
      
      }
      // &:after{
      //   content: '';
        
      //   position: absolute;
      //   width: 101%;
      //   height: 101%;
      //   z-index: 2;
      //   inset: -1%;
      //   border-radius: 50%;
        
      //   background-image: radial-gradient(transparent 60%, var(--bg-medium) 90%);
        
        
      
      // }
      


    }
    // .cover-layer-shadow{
    //   position: absolute;
    //   width: 90%;
    //   height: 90%;
    //   z-index: 1;
    //   inset: 10px;
    //   background-image: radial-gradient(var(--bg-heavy), var(--bg-heavy-20));
      
    //   //background-color: var(--bg-shadow);
    // }

    @for $i from 1 through $slice_count {

      #mask-#{$i} {

        --initial-scale: #{$i - 0.75};
        --initial-rotation: calc(((180 - ((180 * #{$i}) / var(--slices))) + var(--rotation-const)) * 1deg);
        //--initial-translateZ: calc(((30 * var(--slices)) - (#{$i} * 30)) * 1px);
        --clip: url(#maskpath-#{$i});
        //--starting-Z: calc(#{$i} * 10px);
        //--starting-opacity: calc( 1 - (1 / (#{$i} * 0.5)));
        $amount: math.div(100, $slice_count) * math.pow(math.div($i, 4), 3) * 1%;
        $shade-amount: 100 - ($i * 2.5%);

        //$dark-layer-bg: get_layer_bg($fg-color_dark, $bg-color_dark, $i, $slice_count);
        $dark-layer-bg: color.mix($fg-color_dark, $bg-color_dark, $amount);
        $light-layer-bg: color.mix($fg-color_light, $bg-color_light, $amount);
        --dark-layer-bg: #{$dark-layer-bg};
        --light-layer-bg: #{$light-layer-bg};
        
        //--animation-delay: calc(120s - ((var(--slices) * var(--time-modifier)) - (#{$i} * var(--time-modifier))));
        --delay: #{2 - 0.25 * $i}s;
        --duration: calc(5s - #{3 - 0.05 * $i}s);
        
        $cover_shade_dark: color.mix($dark-layer-bg, $sh-color-dark, $shade-amount);
        $cover_shade_light: color.mix($light-layer-bg, $sh-color-light, $shade-amount);

        --dark-layer-shade: #{$cover_shade_dark};
        --light-layer-shade: #{$cover_shade_light};
        
        transform: scale(var(--initial-scale), var(--initial-scale)) rotate(var(--initial-rotation));
        opacity: 1;
        z-index: $i;
        //transform: translateZ(var(--starting-Z)) rotate(360deg);
        //animation: start-cover-svgs-transform var(--animation-delay) linear 0s ,cover-svgs-transform var(--animation-duration) linear  var(--animation-delay) infinite;
        //animation: new-start-cover-animation var(--duration) linear var(--delay);
        
        
      }
      
    }
  }
}
.cover-overlay{
  
  position: fixed;
  width: 100%;
  inset: 0;
  z-index: 1;
  background-image: radial-gradient(var(--bg-heavy-00) 45%, var(--bg-heavy) 80%);
  pointer-events: none;
  
  
}
.cover-shade{
  
  position: fixed;
  width: 100%;
  inset: 0;
  background-image: conic-gradient(from -125deg at 30% 70%, var(--extra-color-40), var(--extra-color-00) , var(--extra-color-40));
  pointer-events: none;
  mix-blend-mode: color;
  animation: fade-in 1s linear 0s forwards;
  z-index: 2;
}
