#cover{
    overflow-x: clip;
    height: 100vh;
    position: relative;
    //background-image: radial-gradient(var(--bg-dark), var(--bg-light));
    --slices: 15;
    --modifier: 20;
    --time-modifier: 20s;
    .cover-layer{
        perspective: 30px;
        width: 100vw;
        height: 100vh;
        transform-style: preserve-3d;
        svg{
            position: absolute;
            top: 50%;
            left: 50%;
            //opacity: 0;
            transform-style: preserve-3d;
            //transform: translate(-50%, -50%);
            transform-origin: center;
            will-change: transform; 
            //background-color: var(--bg-shadow);
            g{
              transform-origin: center;
              //prospective: 2px;
              path{
                
                position: relative;
                transform-origin: center;
                fill: var(--bg-dark); 
                filter: drop-shadow(0 0 0.5rem var(--bg-shadow));
                //stroke: var(--bg-dark);
                z-index: 1;
                
                //
                //
                &.cover-layer-overlay{
                    //opacity: 0;
                    will-change: opacity; 
                    transform: translateZ(1px);
                    fill: var(--bg-light); 
                    //stroke: var(--bg-light);
                    z-index: -1;
                    
                    
                }
              }
            }
            
            
        }
        @for $i from 1 through 15{
            
              
          svg#mask-#{$i}{
            --initial-scale: calc(0.05 + (#{$i} * #{$i} / (var(--slices) * 3)));
            --scale-start: calc(0.05 + (1 * 1 / (var(--slices) * 3)));
            --scale-end: calc(0.05 + (var(--slices) * var(--slices) / (var(--slices) * 3)));
            animation: cover-layer-anim calc(var(--slices) * var(--time-modifier)) calc((var(--slices) * var(--time-modifier)) - (#{$i}s * var(--modifier))) linear infinite;
            
            opacity: 0;
            //transform: translate(-50%, -50%) scale3d(var(--initial-scale),var(--initial-scale),var(--initial-scale)) rotate(calc(30deg - (2 * #{$i}deg)));
            g{
              
              path{
                //transform: translateZ(-1px);
                animation: cover-layer-opacity calc(var(--slices) * var(--time-modifier)) calc((var(--slices) * var(--time-modifier)) - (#{$i}s * var(--modifier))) ease-in infinite;
                // &.cover-layer-overlay{
                //     //transform: translateZ(1px); //opacity: calc(0.067 * #{$i});
                //   opacity: 0;
                //   animation: cover-layer-opacity 45002ms calc(45s - (#{$i}s * 3)) ease-in infinite;
                // }
              }
              //transform: scale3d(var(--initial-scale),var(--initial-scale),var(--initial-scale)) rotate(calc(30deg - (2 * #{$i}deg)));
              
            }
            
            
          }
        }
    }
}

@keyframes cover-layer-anim{
    0%{
        transform: translate3d(-50%, -50%, -20px) scale(0.25) rotate(600deg);
        opacity: 1;
        

       
        
    }
    100%{
        transform: translate3d(-50%, -50%, 25px) scale(1) rotate(0deg);
        opacity: 1;
        
    }
}
@keyframes cover-layer-opacity{
    0%{
      fill: var(--bg-dark);
      opacity: 1;
      filter: blur(0.125rem) drop-shadow(0 0 0.5rem var(--bg-shadow));
    }
    80%{
      
      filter: blur(0)  drop-shadow(0 0 0.5rem var(--bg-shadow));
    }
    90%{
      
      opacity: 1;
      filter: blur(0)  drop-shadow(0 0 0.5rem var(--bg-shadow));
    }
    
    99%{
      fill: var(--bg-light);
      opacity: 1;
    }
    100%{
      fill: var(--bg-light);
      opacity: 0;
      filter: blur(0.05rem) drop-shadow(0 0 0.5rem var(--bg-shadow));
    }
  }